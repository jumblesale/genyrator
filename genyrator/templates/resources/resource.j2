{%- set entity = template.entity -%}
{%- set identifier_column = entity.identifier_column -%}
{%- set schema_name = entity.python_name + '_schema' -%}
{%- set schema_name_many = entity.plural + '_many_schema' -%}
{%- set get_one_endpoint = entity.python_name + '_by_id' -%}
{%- if entity.model_alias is not none -%}
    {%- set model_import = 'from ' + entity.model_alias.module_import + ' import ' + entity.model_alias.class_name -%}
{%- else -%}
    {%- set model_import = 'from ' + template.module_name + '.sqlalchemy.model import ' + entity.class_name -%}
{%- endif -%}
import json
from typing import Optional

from flask import request, abort, url_for
from flask_restplus import Resource, fields, Namespace
{% if entity.has_joined_entities -%}
from sqlalchemy.orm import joinedload
{%- endif %}

from {{ template.module_name }}.core.convert_dict import (
    python_dict_to_json_dict, json_dict_to_python_dict
)
from {{ template.db_import_path }} import db
{{ model_import }}
from {{ template.module_name }}.sqlalchemy.convert_properties import convert_properties_to_sqlalchemy_properties
from {{ template.module_name }}.sqlalchemy.join_entities import create_joined_entity_map
from {{ template.module_name }}.schema import {{ entity.class_name }}Schema
from {{ template.module_name }}.sqlalchemy.model_to_dict import model_to_dict
from {{ template.module_name }}.domain.{{ entity.class_name }} import {{ entity.python_name }} as {# -#}
    {{ template.entity.python_name }}_domain_model

api = Namespace('{{ entity.resource_namespace }}',
                path='{{ entity.resource_path }}',
                description='{{ entity.display_name }} API', )

{{ template.restplus_template }}

{{ entity.python_name }}_schema = {{ entity.class_name }}Schema()
{{ entity.plural }}_many_schema = {{ entity.class_name }}Schema(many=True)

{%- macro find_element_by_id() -%}
    result: Optional[{{ entity.class_name }}] = {{ entity.class_name }}.query.filter_by({# -#}
{{ entity.identifier_column.python_name }}={# -#}
{{ entity.identifier_column.json_property_name }}){# -#}
{%- endmacro -%}

{%- if entity.supports_put or entity.supports_get_one or entity.supports_delete_one %}


@api.route('/{{ entity.dashed_name }}/<{{ entity.identifier_column.json_property_name }}>', endpoint='{{ entity.python_name }}_by_id')  # noqa: E501
class {{ entity.class_name }}Resource(Resource):  # type: ignore
    {%- if entity.supports_get_one %}
    @api.marshal_with({{ entity.python_name }}_model)
    @api.doc(id='get-{{ entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})  # noqa: E501
    def get(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        {{ find_element_by_id() }}.first()  # noqa: E501
        if result is None:
            abort(404)
        return model_to_dict(
            result,
            {{ entity.python_name }}_domain_model,
        ), 200
    {%- endif -%}{# get_one method #}
    {%- if entity.supports_delete_one %}

    @api.doc(id='delete-{{ entity.python_name }}-by-id', responses={401: 'Unauthorised', 404: 'Not Found'})
    def delete(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ entity.class_name }}] = {{ entity.class_name }}.query.filter_by({# -#}
{{ entity.identifier_column.python_name }}={# -#}
{{ entity.identifier_column.json_property_name }}){# -#}
.delete()
        if result != 1:
            abort(404)
        db.session.commit()
        return '', 204
    {%- endif -%}{# delete_one method #}
    {%- if entity.supports_put %}

    @api.expect({{ entity.python_name }}_model, validate=False)
    @api.marshal_with({{ entity.python_name }}_model)
    def put(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        data = json.loads(request.data)
        if type(data) is not dict:
            return abort(400)

        if 'id' not in data:
            data['id'] = {{ identifier_column.json_property_name }}

        {{ find_element_by_id() }}.first()  # noqa: E501

        joined_entities = create_joined_entity_map(
            {{ entity.python_name }}_domain_model,
            data,
        )

        if type(joined_entities) is list:
            abort(400, joined_entities)

        data = convert_properties_to_sqlalchemy_properties(
            {{ entity.python_name }}_domain_model,
            joined_entities,
            json_dict_to_python_dict(data),
        )

        marshmallow_result = {{ entity.python_name }}_schema.load(
            json_dict_to_python_dict(data),
            session=db.session,
            instance=result,
        )
        if marshmallow_result.errors:
            abort(400, python_dict_to_json_dict(marshmallow_result.errors))

        db.session.add(marshmallow_result.data)
        db.session.commit()

        return model_to_dict(
            marshmallow_result.data,
            {{ entity.python_name }}_domain_model,
        ), 201
    {%- endif -%}{# put method #}
    {%- if entity.supports_patch %}

    @api.expect({{ entity.python_name }}_model, validate=False)
    def patch(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        ...
{#        data = json.loads(request.data) -#}
{#        if type(data) is not dict: -#}
{#            return abort(400) -#}
{# -#}
{#        {{ find_element_by_id() }}.first() -#}
{# -#}
{#        if result is None: -#}
{#            abort(404) -#}
{# -#}
{#        python_dict = json_dict_to_python_dict(data) -#}
{#        [setattr(result, k, v) for k, v in python_dict.items()] -#}
{# -#}
{#        db.session.add(result) -#}
{#        db.session.commit() -#}
    {%- endif -%}{# patch method -#}
{%- endif -%}{# single class -#}
{%- if entity.supports_get_all or entity.supports_delete_all or entity.supports_post %}

@api.route('/{{ entity.dashed_plural }}', endpoint='{{ entity.resource_namespace }}')  # noqa: E501
class Many{{ entity.class_name }}Resource(Resource):  # type: ignore
    {%- if entity.supports_get_all %}
    def get(self):
        {%- if entity.supports_get_one %}
        result = {{ entity.class_name }}.query.all()
        urls = [
            url_for(
                '{{ get_one_endpoint }}',
                {{ identifier_column.json_property_name }}=x.{{ identifier_column.python_name }}
            )
            for x in result
        ]
        return {"links": urls}
        {%- else %}
        ...
        {%- endif %}
    {%- endif -%}{# get_all method #}
    {%- if entity.supports_post %}

    def post(self):  # type: ignore
        ...
{#-        data = json.loads(request.data)-#}
{#-        if type(data) is not dict:-#}
{#-            return abort(400)-#}
{#--#}
{#-        {{ find_element_by_id() }}.first()-#}
{#-        if result is not None:-#}
{#-            abort(400, {"{{ entity.identifier_column.json_property_name }}": {# -#}
{#-                "A {{ entity.class_name }} with {{ entity.identifier_column.json_property_name }} {# -#}
{#-                {} already exists".format({{ entity.identifier_column.json_property_name }})})-#}
{#--#}
{#-        marshmallow_result = {{ entity.python_name }}_schema.load(json_dict_to_python_dict(data), session=db.session)-#}
{#-        if marshmallow_result.errors:-#}
{#-            abort(400, marshmallow_result.errors)-#}
{#--#}
{#-        db.session.add(marshmallow_result.data)-#}
{#-        db.session.commit()-#}
{#-        return '', 201-#}
        {%- endif -%}{# support post #}
{%- endif -%}{# many class #}
{%- if entity.api_paths -%}
{%- macro joinedload(relationship) -%}
    joinedload('{{ relationship }}')
{%- endmacro -%}
{%- for api_path in entity.api_paths %}


@api.route('/{{ entity.dashed_name }}/<{{ entity.identifier_column.json_property_name }}>/{{ api_path.route }}', endpoint='{{ api_path.endpoint }}')  # noqa: E501
class {{ api_path.class_name }}(Resource):  # type: ignore
    @api.doc(id='{{ api_path.endpoint }}', responses={401: 'Unauthorised', 404: 'Not Found'})  # noqa: E501
{#-    @api.marshal_with({{ entity.python_name }}_model)  # noqa: E501 #}
    def get(self, {{ entity.identifier_column.json_property_name }}):  # type: ignore
        result: Optional[{{ entity.class_name }}] = {{ entity.class_name }} \
            .query \
            .options(
    {%- set sep = joiner('.') -%}
    {%- for entity in api_path.joined_entities %}
                {{ sep() }}{{ joinedload(entity) }}
    {%- endfor %}
            ) \
            .filter_by({# -#}
                {{ entity.identifier_column.python_name }}={# -#}
                {{ entity.identifier_column.json_property_name }}{# -#}
            ) \
            .first()  # noqa: E501
        if result is None:
            abort(404)
        result_dict = model_to_dict(result, {{ entity.python_name }}_domain_model, ['{#  -#}
    {%- set sep = joiner("', '") -%}
    {%- for entity in api_path.joined_entities -%}
        {{ sep() }}{{ entity }}
    {%- endfor %}'])  # noqa: E501

        return result_dict
{%- endfor -%}
{%- endif %}

