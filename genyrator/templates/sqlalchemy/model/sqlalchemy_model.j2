from sqlalchemy_utils import UUIDType, JSONType
from sqlalchemy import UniqueConstraint

from {{ template.db_import_path }} import db
from {{ template.module_name }}.sqlalchemy.model.types import BigIntegerVariantType

{%- macro pad(name) -%}
{{ ' ' * (template.entity.max_property_length - (name | length)) }}
{%- endmacro  %}


class {{ template.entity.class_name }}(db.Model):  # type: ignore
{%- if template.entity.table_name %}
    __table_name__ = '{{ template.entity.table_name }}'

{% endif %}
    # Properties
{%- if template.entity.additional_properties %}
    {%- for property in template.entity.additional_properties %}
    {{ property.python_name }} = {{ property.value }}
    {%- endfor %}
{% endif %}
    id ={{ pad('id') }} db.Column(BigIntegerVariantType, primary_key=True, autoincrement=True)  # noqa: E501
{%- for column in template.entity.columns %}
    {{ column.python_name }} ={{ pad(column.python_name) }} db.Column(
    {%- if column.alias %}'{{ column.alias }}', {% endif -%}
    {{ column.sqlalchemy_type.value }}{# -#}
    {%- if column.relationship is defined %}, db.ForeignKey('{{ column.relationship }}'){% endif %}
    {%- if column.index %}, index=True{% endif %}{# -#}
    , nullable={{ column.nullable | string }})  # noqa: E501
{%- endfor %}

    # Relationships
{%- for relationship in template.entity.relationships %}
    {{ relationship.property_name }} = db.relationship(
        '{{ relationship.target_entity_class_name }}',
        lazy={{ relationship.lazy | string }},
        uselist={{ relationship.join.value == 'to_many' | string }},
    {%- if relationship.target_entity_class_name == template.entity.class_name -%}
      {%- if relationship.source_foreign_key_column_name %}
        primaryjoin=id=={{ relationship.source_foreign_key_column_name }},
        remote_side=[id],
      {%- elif relationship.target_foreign_key_column_name and relationship.secondary_join_name %}
        secondary='{{ relationship.join_table }}',
        primaryjoin='{{ template.entity.class_name }}.id=={{ relationship.join_table_class_name }}.{{ relationship.target_foreign_key_column_name }}',
        secondaryjoin='{{ template.entity.class_name }}.id=={{ relationship.join_table_class_name }}.{{ relationship.secondary_join_name }}',
      {%- elif relationship.target_foreign_key_column_name %}
        foreign_keys=[{{ relationship.target_foreign_key_column_name }}],
      {%- endif -%}
    {%- else -%}
      {%- if relationship.source_foreign_key_column_name %}
        foreign_keys=[{{ relationship.source_foreign_key_column_name }}],
      {%- elif relationship.target_foreign_key_column_name %}
        foreign_keys='{{ relationship.target_entity_class_name }}.{{ relationship.target_foreign_key_column_name }}',
      {%- endif %}
      {%- if relationship.__class__.__name__ == 'RelationshipWithJoinTable' %}
        secondary='{{ relationship.join_table }}',
      {%- endif %}
    {%- endif %}
    )
{%- endfor %}
{%- if template.entity.uniques %}

    __table_args__ = {{ template.entity.table_args }}
{% endif %}
